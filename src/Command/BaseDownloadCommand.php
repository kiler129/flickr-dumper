<?php
declare(strict_types=1);

namespace App\Command;

use App\Factory\HttpClientFactory;
use App\Flickr\BaseApiClient;
use App\Util\NameGenerator;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Contracts\HttpClient\HttpClientInterface;

/**
 * @deprecated
 */
abstract class BaseDownloadCommand extends Command
{
    use RandomizationAware;

    private const DEFAULT_DEST_PREFIX = './downloaded';

    protected SymfonyStyle $io;
    protected HttpClientInterface $downloadHttpClient;
    private string $defaultDestPrefix = self::DEFAULT_DEST_PREFIX;

    public function __construct(
        protected HttpClientFactory $clientFactory,
        protected Filesystem $fs,
        protected BaseApiClient $apiClient,
        protected NameGenerator $nameGenerator,
    ) {
        parent::__construct();
    }

    protected function configure()
    {
        $this->addOption(
                'default-destination-prefix',
                null,
                InputOption::VALUE_REQUIRED,
                'Path prefix for autogenerated download paths. Useful when you want to keep automatic names but ' .
                'in a different directory.',
                self::DEFAULT_DEST_PREFIX
            )
             ->addOption('batch-size', null, InputOption::VALUE_REQUIRED, '', 10)
             ->addOption('force-download', 'f', InputOption::VALUE_NONE, 'Overwrite existing files even if they exist')
             ->addArgument(
                 'destination',
                 InputArgument::OPTIONAL,
                 'Directory to save photos to (by default it will create one)'
             )
        ;

        $this->addRandomizationConfigOptions();
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $this->io = new SymfonyStyle($input, $output);
        $this->defaultDestPrefix = $input->getOption('default-destination-prefix');

        $this->downloadHttpClient = $this->clientFactory->createDownloadHttpClient();
        $this->configureRandomizationFromOptions($input);

        return Command::SUCCESS;
    }

    protected function getUserPhotosetsDir(string $nsid): string
    {
        return $this->defaultDestPrefix . '/' . $nsid . '-photosets';
    }

    protected function getPhotosetStableDir(array $props): string
    {
        return $this->getUserPhotosetsDir($props['owner']) . '/' .
               $this->nameGenerator->getDirectoryNameForPhotoset($props);
    }
}
